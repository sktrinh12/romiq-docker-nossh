# declare flask app
upstream pyapi_app {
    least_conn;
    server pyapi1:5000;
    server pyapi2:5000;
}

# declare shiny app
upstream shiny_app {
    server shinyapp:3838;
}

# required for websockets; shiny uses websockets (certain functionality doesnt work otherwise)
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Configure NGINX to reverse proxy HTTP requests to the upstream server (Gunicorn (WSGI server))

# shinyapp server
server {
    listen 80 default_server;
    server_name shiny_app;

    client_max_body_size 50M;
    # normal requests go to shiny app
    location / {
        proxy_pass http://shiny_app;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

        # required for websockets; shiny uses websockets (certain functionality doesnt work otherwise)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_read_timeout 5d;
        proxy_buffering off;
    } # This server block handles the www request and passes that onto your upstream server(s)

}

# python api server
server {
    listen 81;
    server_name pyapi_app;

    # pyapi requests go to the flask app
    location / {

        proxy_pass http://pyapi_app;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

    }
}
